(use-package exwm
  :init
  (setq exwm-workspace-number 4
	exwm-input-global-keys `((,(kbd "s-R") . exwm-reset)
				 (,(kbd "s-W") . exwm-workspace-switch)
				 (,(kbd "s-D") . (lambda (command)
						   (interactive (list (read-shell-command "$ ")))
						   (start-process-shell-command command nil command)))
				 (,(kbd "s-B") . (lambda ()
						   (interactive)
						   (start-process "firefox" nil "firefox")))
				 (,(kbd "S-s-<return>") . vterm)
				 (,(kbd "<XF86AudioMute>") . (lambda ()
							       (interactive)
							       (pulseaudio-control-toggle-current-sink-mute)))
				 (,(kbd "<XF86AudioLowerVolume>") . (lambda ()
								      (interactive)
								      (pulseaudio-control-decrease-sink-volume 1)))
				 (,(kbd "<XF86AudioRaiseVolume>") . (lambda ()
								      (interactive)
								      (pulseaudio-control-increase-sink-volume 1)))
				 (,(kbd "<XF86MonBrightnessDown>") . (lambda ()
								       (interactive)
								       (start-process "" nil "xbacklight" "-dec" "10")))
				 (,(kbd "<XF86MonBrightnessUp>") . (lambda ()
								     (interactive)
								     (start-process "" nil "xbacklight" "-inc" "10")))
				 ,@(mapcar (lambda (i)
					     `(,(kbd (format "s-%d" i)) .
					       (lambda ()
						 (interactive)
						 (exwm-workspace-switch-create ,i))))
					   (number-sequence 0 9)))
	exwm-input-simulation-keys `((,(kbd "C-b") . [left])
				     (,(kbd "C-f") . [right])
				     (,(kbd "C-p") . [up])
				     (,(kbd "C-n") . [down])
				     (,(kbd "C-a") . [home])
				     (,(kbd "C-e") . [end])
				     (,(kbd "M-v") . [prior])
				     (,(kbd "C-v") . [next])
				     (,(kbd "C-d") . [delete])
				     (,(kbd "C-k") . [S-end delete])))
  :hook
  (exwm-update-class . (lambda ()
			 (exwm-workspace-rename-buffer exwm-class-name)))
  (exwm-update-title . (lambda ()
			 (exwm-workspace-rename-buffer (format "%s: %s"
							       exwm-class-name
							       exwm-title))))
  (exwm-manage-finish . (lambda ()
			  (when (and exwm-class-name
				     (string= exwm-class-name "firefox"))
			    (exwm-input-set-local-simulation-keys nil))))
  :config
  (require 'exwm-randr)
  (require 'exwm-systemtray)
  (exwm-randr-enable)
  (exwm-systemtray-enable))
